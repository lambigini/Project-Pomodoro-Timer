{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","FocusBreakDuration.js","PlayStopButton.js","ProgressLabel.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","RenderDuration","focusDuration","breakDuration","isTimerRunning","session","handleDecreaseFocus","handleIncreseFocus","handleDecreaseBreak","handleIncreseBreak","data-testid","type","onClick","disabled","PlayStopButton","playPause","handleStopButton","role","aria-label","title","oi","ProgressLabel","showLabel","progressWidth","label","parseInt","timeRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setfocusDuration","setbreakDuration","setShowLabel","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","FocusBreakDuration","event","currentFocus","min","currentBreak","currentValue","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e8ea1dc.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React, { useState } from \"react\";\n// import { minutesToDuration } from \"./utils/duration\";\n\nfunction RenderDuration({\n  focusDuration,\n  breakDuration,\n  isTimerRunning,\n  session,\n  minutesToDuration,\n  handleDecreaseFocus,\n  handleIncreseFocus,\n  handleDecreaseBreak,\n  handleIncreseBreak,\n}) {\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <div className=\"input-group input-group-lg mb-2\">\n          <span className=\"input-group-text\" data-testid=\"duration-focus\">\n            {/* TODO: Update this text to display the current focus session duration */}\n            Focus Duration: {minutesToDuration(focusDuration)}\n          </span>\n          <div className=\"input-group-append\">\n            {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"decrease-focus\"\n              onClick={handleDecreaseFocus}\n              disabled={session || isTimerRunning ? true : false}\n            >\n              <span className=\"oi oi-minus\" />\n            </button>\n            {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"increase-focus\"\n              onClick={handleIncreseFocus}\n              disabled={session || isTimerRunning ? true : false}\n            >\n              <span className=\"oi oi-plus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col\">\n        <div className=\"float-right\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-break\">\n              {/* TODO: Update this text to display the current break session duration */}\n              Break Duration: {minutesToDuration(breakDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-break\"\n                onClick={handleDecreaseBreak}\n                disabled={session || isTimerRunning ? true : false}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-break\"\n                onClick={handleIncreseBreak}\n                disabled={session || isTimerRunning ? true : false}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RenderDuration;\n","import React, { useState } from \"react\";\n// import classNames from \"./utils/class-names\";\n\nfunction PlayStopButton({\n  playPause,\n  isTimerRunning,\n  classNames,\n  handleStopButton,\n  session,\n}) {\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n              })}\n            />\n          </button>\n          {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n          {/* TODO: Disable the stop button when there is no active session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"stop\"\n            title=\"Stop the session\"\n            onClick={handleStopButton}\n            disabled={!session ? true : false}\n          >\n            <span className=\"oi oi-media-stop\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PlayStopButton;\n","import React, { useState } from \"react\";\n\nfunction ProgressLabel({\n  session,\n  focusDuration,\n  breakDuration,\n  minutesToDuration,\n  secondsToDuration,\n  isTimerRunning,\n  showLabel,\n}) {\n  const progressWidth =\n    session.label === \"Focusing\"\n      ? parseInt(focusDuration * 60 - session.timeRemaining) /\n        ((focusDuration * 60) / 100)\n      : parseInt(breakDuration * 60 - session.timeRemaining) /\n        ((breakDuration * 60) / 100);\n\n  // console.log(\n  //   `${session.label} for focus ${focusDuration} break ${breakDuration} `\n  // );\n\n  // console.log(`progressWidth ${progressWidth} `);\n  return (\n    <div>\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n          <h2 data-testid=\"session-title\">\n            {session.label} for{\" \"}\n            {session.label === \"Focusing\"\n              ? minutesToDuration(focusDuration)\n              : minutesToDuration(breakDuration)}{\" \"}\n            minutes\n          </h2>\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {session.label === \"Focusing\"\n              ? secondsToDuration(session.timeRemaining)\n              : secondsToDuration(session.timeRemaining)}{\" \"}\n            remaining\n          </p>\n          {!isTimerRunning && showLabel ? <h2>PAUSED</h2> : null}\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={progressWidth} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${progressWidth}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressLabel;\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusBreakDuration from \"../FocusBreakDuration\";\nimport PlayStopButton from \"../PlayStopButton\";\nimport ProgressLabel from \"../ProgressLabel\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setfocusDuration] = useState(25);\n  const [breakDuration, setbreakDuration] = useState(5);\n  const [showLabel, setShowLabel] = useState(false);\n\n  const handleDecreaseFocus = (event) => {\n    return setfocusDuration((currentFocus) => Math.max(5, currentFocus - 5));\n  };\n\n  const handleIncreseFocus = (event) => {\n    return setfocusDuration((currentFocus) => Math.min(60, currentFocus + 5));\n  };\n\n  const handleDecreaseBreak = (event) => {\n    return setbreakDuration((currentBreak) => Math.max(1, currentBreak - 1));\n  };\n\n  const handleIncreseBreak = (event) => {\n    return setbreakDuration((currentBreak) => Math.min(15, currentBreak + 1));\n  };\n\n  const handleStopButton = () => {\n    // console.log(\" stop button clicked\");\n    setSession((current) => (current = null));\n    setIsTimerRunning((current) => (current = false));\n    setfocusDuration((current) => (current = 25));\n    setbreakDuration((current) => (current = 5));\n    setShowLabel((currentValue) => (currentValue = false));\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setShowLabel((currentValue) => (currentValue = true));\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <FocusBreakDuration\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        isTimerRunning={isTimerRunning}\n        session={session}\n        minutesToDuration={minutesToDuration}\n        handleDecreaseFocus={handleDecreaseFocus}\n        handleIncreseFocus={handleIncreseFocus}\n        handleDecreaseBreak={handleDecreaseBreak}\n        handleIncreseBreak={handleIncreseBreak}\n      />\n\n      <PlayStopButton\n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        classNames={classNames}\n        handleStopButton={handleStopButton}\n        session={session}\n      />\n      {showLabel ? (\n        <ProgressLabel\n          session={session}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n          minutesToDuration={minutesToDuration}\n          secondsToDuration={secondsToDuration}\n          isTimerRunning={isTimerRunning}\n          showLabel={showLabel}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}